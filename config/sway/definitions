set $mod Mod4
set $term alacritty

# directions
set $left h
set $down j
set $up k
set $right l

# onscreen bar
set $onscreen_bar bash /usr/share/sway/scripts/wob.sh "$accent-colorFF" "$background-colorFF"

# brightness control
set $brightness_step bash -c 'echo $(( $(light -Mr) / 100 * 5 < 1 ? 1 : $(( $(light -Mr) / 100 * 5 )) ))'
set $brightness_up light -r -A $($brightness_step) && light -G | cut -d'.' -f1 > $WOBSOCK
set $brightness_down light -r -U $($brightness_step) && light -G | cut -d'.' -f1 > $WOBSOCK

# audio control
set $source_volume pactl get-source-volume @DEFAULT_SOURCE@ | grep '^Volume:' | cut -d / -f 2 | tr -d ' ' | sed 's/%//'
set $mic_mute pactl set-source-mute @DEFAULT_SOURCE@ toggle && pactl get-source-mute @DEFAULT_SOURCE@ | sed -En "/no/ s/.*/$($source_volume)/p; /yes/ s/.*/0/p" > $WOBSOCK
set $volume_up amixer sset Master 5%+ | sed -En 's/.*\[([0-9]+)%\].*/\1/p' | head -1 > $WOBSOCK
set $volume_down exec amixer sset Master 5%- | sed -En 's/.*\[([0-9]+)%\].*/\1/p' | head -1 > $WOBSOCK
set $volume_mute exec amixer sset Master toggle | sed -En '/\[on\]/ s/.*\[([0-9]+)%\].*/\1/ p; /\[off\]/ s/.*/0/p' | head -1 > $WOBSOCK


# rofi theme
set $rofi_theme "* {lightbg: $background-color; background: $background-color; lightfg: $accent-color; foreground: $text-color;}"

# clipboard history
set $clipboard cliphist list | rofi -dmenu -font "$gui-font" -p "Select item to copy" -lines 10 -width 35 -theme-str $rofi_theme | cliphist decode | wl-copy
set $clipboard-del cliphist list | rofi -dmenu -font "$gui-font" -p "Select item to delete" -lines 10 -width 35 -theme-str $rofi_theme | cliphist delete

# zeit tracking
set $zeit_list zeit list --only-projects-and-tasks --append-project-id-to-task | \
    rofi -dmenu -font "$gui-font" -p "Select task to track" -lines 10 -width 35 -theme-str $rofi_theme | \
    /usr/share/sway/scripts/zeit.sh track && \
    pkill -RTMIN+10 waybar

# Your preferred application launcher
# set $menu rofi -show combi -combi-modi "drun,run" -terminal $term -ssh-command "{terminal} {ssh-client} {host} [-p {port}]" -run-shell-command "{terminal} {cmd}" -show-icons -font "$gui-font" -lines 10 -width 35 -theme-str $rofi_theme
set $menu dmenu_path | dmenu | xargs swaymsg exec --

### Lockscreen configuration
set $locking swaylock --daemonize --color "$selection-color" --inside-color "$selection-color" --inside-clear-color "$text-color" --ring-color "$color2" --ring-clear-color "$color11" --ring-ver-color "$color13" --show-failed-attempts --fade-in 0.2 --grace 2 --effect-vignette 0.5:0.5 --effect-blur 7x5 --ignore-empty-password --screenshots --clock

###Notification daemon configuration
set $notifications mako --font "$term-font" --text-color "$text-color" --border-color "$accent-color" --background-color "$background-color" --border-size 3 --width 400 --height 200 --padding 20 --margin 20 --default-timeout 15000

### Idle configuration
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.
#
set $idle swayidle -w \
    timeout 240 'light -G > /tmp/brightness && light -S 10' resume 'light -S $([ -f /tmp/brightness ] && cat /tmp/brightness || echo 100%)' \
    timeout 300 'exec $locking' \
    timeout 600 'swaymsg "output * dpms off"' \
    resume 'swaymsg "output * dpms on"' \
    before-sleep 'playerctl pause' \
    before-sleep 'exec $locking'

# statusbar command
set $statusbar waybar
set $waybar_position top

# pulseaudio command
set $pulseaudio $term_float pulsemixer

# help command
set $help /usr/share/sway/scripts/help.sh

# calendar application
set $calendar $term_float khal interactive

# workspace names
set $ws1 number 1
set $ws2 number 2
set $ws3 number 3
set $ws4 number 4
set $ws5 number 5
set $ws6 number 6
set $ws7 number 7
set $ws8 number 8
set $ws9 number 9
set $ws10 number 10

# screenshot
set $grimshot /usr/share/sway/scripts/grimshot
set $image_upload /usr/share/sway/scripts/upload-image.sh
set $screenshot_screen_clipboard $grimshot --notify copy output
set $screenshot_screen_file $grimshot --notify save output
set $screenshot_screen_upload $screenshot_screen_file | xargs $image_upload
set $screenshot_selection_clipboard $grimshot --notify copy window
set $screenshot_selection_file $grimshot --notify save window
set $screenshot_selection_upload $screenshot_selection_file | xargs $image_upload
