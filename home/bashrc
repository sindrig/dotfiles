#
# ~/.bashrc
#

[[ $- != *i* ]] && return

colors() {
	local fgc bgc vals seq0

	printf "Color escapes are %s\n" '\e[${value};...;${value}m'
	printf "Values 30..37 are \e[33mforeground colors\e[m\n"
	printf "Values 40..47 are \e[43mbackground colors\e[m\n"
	printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

	# foreground colors
	for fgc in {30..37}; do
		# background colors
		for bgc in {40..47}; do
			fgc=${fgc#37} # white
			bgc=${bgc#40} # black

			vals="${fgc:+$fgc;}${bgc}"
			vals=${vals%%;}

			seq0="${vals:+\e[${vals}m}"
			printf "  %-9s" "${seq0:-(default)}"
			printf " ${seq0}TEXT\e[m"
			printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
		done
		echo; echo
	done
}

colorize(){
    echo "\[\e[$1\]$2\[\e[0m\]"
}

[ -r /usr/share/bash-completion/bash_completion ] && . /usr/share/bash-completion/bash_completion

# Change the window title of X terminals
case ${TERM} in
	xterm*|rxvt*|Eterm*|aterm|kterm|gnome*|interix|konsole*)
		PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\007"'
		;;
	screen*)
		PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\033\\"'
		;;
esac

use_color=true

# Set colorful PS1 only on colorful terminals.
# dircolors --print-database uses its own built-in database
# instead of using /etc/DIR_COLORS.  Try to use the external file
# first to take advantage of user additions.  Use internal bash
# globbing instead of external grep binary.
safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
match_lhs=""
[[ -f ~/.dir_colors   ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
[[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
[[ -z ${match_lhs}    ]] \
	&& type -P dircolors >/dev/null \
	&& match_lhs=$(dircolors --print-database)
[[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && use_color=true

if ${use_color} ; then
	# Enable colors for ls, etc.  Prefer ~/.dir_colors #64489
	if type -P dircolors >/dev/null ; then
		if [[ -f ~/.dir_colors ]] ; then
			eval $(dircolors -b ~/.dir_colors)
		elif [[ -f /etc/DIR_COLORS ]] ; then
			eval $(dircolors -b /etc/DIR_COLORS)
		fi
	fi

	if [[ ${EUID} == 0 ]] ; then
		PS1='\[\033[01;31m\][\h\[\033[01;36m\] \W\[\033[01;31m\]]\$\[\033[00m\] '
	else
		PS1='\[\033[01;32m\][\u@\h\[\033[01;37m\] \W\[\033[01;32m\]]\$\[\033[00m\] '
	fi

	alias ls='ls --color=auto'
	alias grep='grep --colour=auto'
	alias egrep='egrep --colour=auto'
	alias fgrep='fgrep --colour=auto'
else
	if [[ ${EUID} == 0 ]] ; then
		# show root@ when we don't have colors
		PS1='\u@\h \W \$ '
	else
		PS1='\u@\h \w \$ '
	fi
fi

unset use_color safe_term match_lhs sh

alias cp="cp -i"                          # confirm before overwriting something
alias df='df -h'                          # human-readable sizes
alias free='free -m'                      # show sizes in MB
alias np='nano -w PKGBUILD'
alias more=less

xhost +local:root > /dev/null 2>&1

# Bash won't get SIGWINCH if another process is in the foreground.
# Enable checkwinsize so that bash will check the terminal size when
# it regains control.  #65623
# http://cnswww.cns.cwru.edu/~chet/bash/FAQ (E11)
shopt -s checkwinsize

shopt -s expand_aliases

# export QT_SELECT=4

# Enable history appending instead of overwriting.  #139609
shopt -s histappend

#
# # ex - archive extractor
# # usage: ex <file>
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}


export EDITOR=/usr/bin/vim
export VISUAL=$EDITOR
export BROWSER=/usr/bin/google-chrome-stable
# export BROWSER=/usr/bin/firefox-beta

if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


show_virtual_env() {
  if [ -n "$VIRTUAL_ENV" ]; then
    echo "($(basename $VIRTUAL_ENV))"
  fi
}

show_special_env() {
  if [ -n "$SPECIAL_ENV" ]; then
    echo -e " ($SPECIAL_ENV)"
  fi
}

function get_cluster_short() {
  echo "$1" | cut -d . -f1
}

function get_namespace_short() {
    echo "$1" | cut -c1-10
}

KUBE_PS1_NAMESPACE_FUNCTION=get_namespace_short
KUBE_PS1_CLUSTER_FUNCTION=get_cluster_short
KUBE_PS1_SYMBOL_ENABLE=false

USER_P=$(colorize "0;33m" "\u")
DIR_P=$(colorize "0;32m" "\w")
GIT_P='$(__git_ps1)'
SPECIAL_P='$(show_special_env)'
PC_P=$(colorize "0;33m" "\$")
source /home/sindri/sources/kube-ps1/kube-ps1.sh
K8S_P='$(kube_ps1)'

PS1="$USER_P->$DIR_P$GIT_P $K8S_P$SPECIAL_P $PC_P "

PS1='$(show_virtual_env)'$PS1


. ~/sources/git-completion.bash
. ~/sources/git-prompt.sh
. /etc/profile.d/autojump.bash
alias t=j

load-ssh-agent(){
    if [[ "$SSH_AGENT_PID" == "" ]]; then
        eval "$(<~/.ssh-agent-thing)" > /dev/null 2>&1
    fi
}


if ! pgrep -u "$USER" ssh-agent > /dev/null; then
    ssh-agent > ~/.ssh-agent-thing
    load-ssh-agent
    ssh-add /home/sindri/.ssh/id_rsa
    ssh-add /home/sindri/.ssh/id_rsa_kaptio
else
    load-ssh-agent
fi


export PYENV_ROOT="$HOME/sources/pyenv"
export PATH="$PYENV_ROOT/bin:/home/sindri/sources/py-bins/bin:$PATH"
eval "$(pyenv init --path)"
export PATH="/home/sindri/sources/tfenv/bin:$PATH"
export PATH="/home/sindri/bin:$PATH"

eval "$(direnv hook bash)"
eval "$(pyenv init -)"
eval "$(gh completion -s bash)"

eval "$(pyenv virtualenv-init -)"

# alias aws="docker run --rm -it -v ~/.aws:/root/.aws amazon/aws-cli"
source <(kubectl completion bash)
source <(k9s completion bash)
eval "$(register-python-argcomplete zappa)"
eval "$(register-python-argcomplete pipx)"
complete -C /var/lib/tfenv/versions/0.12.26/terraform terraform
complete -C '/usr/bin/aws_completer' aws

export NVM_DIR="/home/sindri/.nvm"
if [ -s "$NVM_DIR/nvm.sh" ]; then
    . "$NVM_DIR/nvm.sh"  # This loads nvm
else
    . /usr/share/nvm/nvm.sh
    . /usr/share/nvm/bash_completion
fi
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

export TFENV_CONFIG_DIR=/home/sindri/.config/tfenv


function ot(){
  (
    cd /home/sindri/dev/overtime/
    . .envrc 2> /dev/null
    ./venv/bin/python main.py "$@"
  )
}


export GOPATH=/home/sindri/go
